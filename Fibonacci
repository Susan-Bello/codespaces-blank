;SERIE DE FIBONACCI PARA PIC 16F887
;PRIMER PROYECTO DE EVALUACION
;MICROCONTROLADORES
;SEMESTRE 2025-II
;PROFESOR: JORGE RICARDO GERSENOWIES ROSAS
;AUTOR: LEONOR SUSAN BELLO DELGADO
;ALUMNOS: LEONOR SUSAN BELLO DELGADO, OMAR IVAN RAMIREZ LORANCA, SANTIAGO AHUMADA SIERRA.

PROCESSOR 16F887
; PIC16F887 Configuration Bit Settings

; Assembly source line config statements

; CONFIG1
  CONFIG  FOSC = INTRC_NOCLKOUT ; Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
  CONFIG  WDTE = OFF            ; Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
  CONFIG  PWRTE = ON            ; Power-up Timer Enable bit (PWRT enabled)
  CONFIG  MCLRE = ON            ; RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
  CONFIG  CP = OFF              ; Code Protection bit (Program memory code protection is disabled)
  CONFIG  CPD = OFF             ; Data Code Protection bit (Data memory code protection is disabled)
  CONFIG  BOREN = ON            ; Brown Out Reset Selection bits (BOR enabled)
  CONFIG  IESO = ON             ; Internal External Switchover bit (Internal/External Switchover mode is enabled)
  CONFIG  FCMEN = ON            ; Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
  CONFIG  LVP = OFF             ; Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

; CONFIG2
  CONFIG  BOR4V = BOR40V        ; Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
  CONFIG  WRT = OFF             ; Flash Program Memory Self Write Enable bits (Write protection off)

// config statements should precede project file includes.
#include <xc.inc>
psect   code,global,class=CODE,delta=2
psect   resetVec,global,class=CODE,delta=2
global  _main, start_initialization ; Required symbols

; Reset Vector
psect   resetVec
    goto    start_initialization

; Main program
psect   code
_main:
start_initialization:  
; Variables
FIB0      equ 0x30    ; Primer numero de Fibonacci
FIB1      equ FIB0+1    ; Segundo numero de Fibonacci
SUMA      equ FIB1+1  ; Almacena la suma
COUNTER   equ SUMA+1    ; Contador
CONTROL   equ COUNTER+1    ; Palabra de control desde PORTA
REFCONTROL equ CONTROL+1   ; Numero de referencia (14)
REFCONTROL0 equ REFCONTROL+1   ; Numero de referencia (0)
FIB14 equ REFCONTROL0+1; CALCULO DE LOS PRIMEROS 14 NUMEROS DE LA SERIE

org	0
goto main
org	38

main:
   banksel PORTA
    clrf    PORTA      ; Inicializa PORTA
    banksel ANSEL
    clrf    ANSEL      ; Configura entradas digitales
    banksel TRISA     
    movlw   0x0F
    movwf   TRISA      ; 4 bits bajos como entrada
    banksel PORTB
    clrf    PORTB      ; Inicializa PORTB
    banksel ANSELH
    clrf    ANSELH     ; Configura entradas digitales
    banksel TRISB
    movlw   0x00
    movwf   TRISB      ; PORTB como salida
    banksel PORTB
    
INITCALC14:
    clrf    FIB0       ; FIB0 = 0
    movlw   0x01
    movwf   FIB1       ; FIB1 = 1
    clrf    SUMA       ; SUMA = 0
    movlw   0x0E
    movwf   FIB14
    
CALCULO14:
    movf    FIB1, W    ; FIB0 = FIB1
    movwf   FIB0
    movf    SUMA, W    ; FIB1 = SUMA
    movwf   FIB1
    movf    FIB0, W    ; SUMA = FIB0 + FIB1
    addwf   FIB1, W
    movwf   SUMA
    movf    FIB1,W
    movwf   PORTB      ; Muestra resultado en PORTB
    decfsz  FIB14,F ; Decrementa contador, salta si es cero
    goto    CALCULO14
    
INICIO:
    clrf    FIB0       ; FIB0 = 0
    movlw   0x01
    movwf   FIB1       ; FIB1 = 1
    clrf    SUMA       ; SUMA = 0
    clrf    COUNTER    ; Contador = 0
    clrf    CONTROL
    movlw   0x0E       ; Numero maximo a calcular (14=233)
    movwf   REFCONTROL
    clrf    PORTB
    

MAIN_LOOP:
    movf    PORTA, W   ; Lee palabra de control de PORTA
    //andlw   0x0F      ; Mascara para 4 bits bajos
    movwf   CONTROL    ; Guarda palabra de control
    movf    CONTROL,W
    subwf   REFCONTROL,W;Compara la palabra de control con la referencia
    btfss  STATUS, 0  ; Salta si CONTROL <= 14
    goto    INICIO
    movlw   0x01
    movwf   REFCONTROL0
    movf CONTROL,W
    subwf   REFCONTROL0,W  ; Resta 1 a CONTROL
    btfsc   STATUS, 0  ; Salta si CONTROL >= 1
    goto    INICIO
    goto    COMP_CON_COUN

COMP_CON_COUN:
    movf    CONTROL,W
    xorwf   COUNTER, W
    btfss   STATUS,2  ; Salta si COUNTER = CONTROL
    goto    INC_COUNTER
    goto    CALCULO_FIBONACCI

INC_COUNTER:
    incf    COUNTER,F  ; Incrementa contador
    movf    COUNTER,W
    xorwf   CONTROL, W
    btfss   STATUS,2  ; Salta si COUNTER = CONTROL
    goto    INC_COUNTER
    goto    CALCULO_FIBONACCI

CALCULO_FIBONACCI:
    movf    FIB1, W    ; FIB0 = FIB1
    movwf   FIB0
    movf    SUMA, W    ; FIB1 = SUMA
    movwf   FIB1
    movf    FIB0, W    ; SUMA = FIB0 + FIB1
    addwf   FIB1, W
    movwf   SUMA
    decfsz  COUNTER,F ; Decrementa contador, salta si es cero
    goto    CALCULO_FIBONACCI
    goto    SALIDA_LCD

SALIDA_LCD:
    movf    FIB1,W
    movwf   PORTB
    goto    INICIO
end
