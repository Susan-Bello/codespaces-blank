;SERIE DE FIBONACCI PARA PIC 16F887
;PRIMER PROYECTO DE EVALUACION
;MICROCONTROLADORES
;SEMESTRE 2025-II
;PROFESOR: JORGE RICARDO GERSENOWIES ROSAS
;AUTOR: LEONOR SUSAN BELLO DELGADO


list    p=16F887
#include <xc.h>

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_CLKOUT// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = ON       // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
     
    ORG     0          ; Vector de reset
    GOTO INICIO; Salta al inicio del programa
    ORG	    5

; Variables del programa
    FIB0 equ 0x30 ;Primer numero a utilizar para comenzar la serie de Fibonacci
    FIB1 equ FIB0+1 ; Segundo numero a utilizar para comenzar la serie de Fibonacci
    SUMA equ FIB1+1; Almacena el numero sumando
    COUNTER equ SUMA+1; Contador para la serie de Fibonacci
    CONTROL equ COUNTER+1; Palabra de control desde el puerto A
    REFCONTROL equ CONTROL+1; Numero de referencia para los 14 numeros
	

; Inicio del programa
INICIO:
    BANKSEL PORTA      ;
    CLRF    PORTA      ;Inicializa PORTA
    BANKSEL ANSEL      ;
    CLRF    ANSEL      ;digital    I/O
    BCF     STATUS,RP1 ; Banco 1
    BANKSEL TRISA     
    MOVLW 0x0F
    MOVWF TRISA; se configuran los 4 bits de menor poderacion como entrada.

    BANKSEL PORTB      ;
    CLRF    PORTB      ;Inicializa PORTB
    BANKSEL ANSELH
    CLRF ANSELH; digital I/O
    BANKSEL TRISB      ;
    MOVLW 0x00
    MOVWF TRISB; Se configura el puerto b como salida

    CLRF    FIB0         ; Inicializa FIB0 en 0
    CLRF     FIB1        ; Inicializa FIB1 en 1
    BSF    SUMA       ; Inicializa SUMA en 0
    MOVLW   0x00            ; Inicializa el contador en 0
    MOVWF   COUNTER
    MOVLW   0x0E;El numero maximo a calcular sera el 14=233
    MOVWF   REFCONTROL


MAIN_LOOP:
    MOVF    PORTA, W        ; Lee la palabra de control del puerto A
    ANDLW   0x0F            ; Mascara para los 4 bits menos significativos
    MOVWF   CONTROL         ; Almacena la palabra de control
    MOVF CONTROL,W
    SUBWF REFCONTROL,W
    BTFSC   STATUS, C       ; Si CONTROL<14 salta
    GOTO INICIO
    MOVLW 0x01
    SUBWF CONTROL,W; Resta 1 a la palabra de control, para asegurar el resultado correcto de la palabra 
    BTFSC   STATUS, C       ; Si CONTROL>0 salta
    GOTO INICIO
    GOTO COMP_CON_COUN
    
; Compara la palabra de control con el contador
COMP_CON_COUN:
    MOVF CONTROL
    XORWF   COUNTER, W
    BTFSS   STATUS, Z       ; Si COUNTER = CONTROL, salta
    GOTO    INC_COUNTER       ; Si no, llama a la rutina de incremento del counter
    GOTO CALCULO_FIBONACCI

;Incrementa el contador
INC_COUNTER:
    MOVF COUNTER,W; Copia el valor del contador a W
    ADDLW 0x01; Suma W+1
    MOVWF COUNTER; Mueve el valor incrementado al counter
    MOVF CONTROL,W; Copia el valor de la palabra de control al registro W
    XORWF   COUNTER, W; Compara el valor del contador con la palabra de control
    BTFSS   STATUS, Z       ; Si COUNTER = CONTROL, salta
    GOTO INC_COUNTER
    GOTO CALCULO_FIBONACCI


CALCULO_FIBONACCI
;Actualización de los registros
    MOVF    FIB1, W; Copia el valor del numero mayor al registro W
    MOVWF   FIB0; Copia el valor del numero mayor al menor, siendo ahora este el menor
    MOVF    SUMA, W; Copia el valor de la suma al registro W
    MOVWF   FIB1; Copia el valor de la suma al numero mayor
; Calcula el numero deseado de la serie de Fibonacci    
    MOVF    FIB0, W; Copia el valor del numero menor al registro W
    ADDWF   FIB1, W; Suma el numero menor con el numero mayor
    MOVWF   SUMA; Almacena el valor de la suma en SUMA
    MOVWF  PORTB; Copia el valor de FIB1 al puerto de salida.
    DECFSZ  COUNTER, F; Decrementa el contador, salta si es cero
    GOTO    CALCULO_FIBONACCI       ; Si el contador no es cero, continúa
    GOTO SALIDA_LCD

SALIDA_LCD:
    MOVF FIB0,W; Copia el valor de FIB0 al registro W
    MOVWF PORTB; Copia el valor de FIB0 al puerto de salida.
    MOVLW 0xDD
    GOTO DELAY

DELAY:
    DECFSZ  W, F; Decrementa el contador, salta si es cero
    GOTO DELAY
    GOTO INICIO

END